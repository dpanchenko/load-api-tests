{
  "stats": {
    "suites": 4,
    "tests": 23,
    "passes": 23,
    "pending": 0,
    "failures": 0,
    "start": "2020-03-10T12:58:10.902Z",
    "end": "2020-03-10T12:58:11.266Z",
    "duration": 364,
    "testsRegistered": 23,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "11f1928a-11c4-46fd-8c94-6dd228336ad9",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "99be0751-3721-4870-813a-565510d8bf0c",
          "title": "Patients integration tests",
          "fullFile": "/Users/kocmoc/Work/digitory/load-api/tests/integration/patients.test.js",
          "file": "/tests/integration/patients.test.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook",
              "fullTitle": "Patients integration tests \"before all\" hook",
              "timedOut": false,
              "duration": 134,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "dbConnection = await db.connect();\nconst collections = await dbConnection.db.collections();\nfor (const collection of collections) {\n  await collection.deleteOne(); // eslint-disable-line\n}\nlet headerParsed = false;\n// getting data from smaple file to work raw data\nawait reader(SAMPLE_FILE, (line) => {\n  if (!headerParsed) {\n    headerParsed = true;\n    return;\n  }\n  fileLines.push(line);\n});\n// build sample data from file\n// parseLine functionality is 100% covered by unit tests\ndataFromFile = fileLines.map(line => parseLine(line));\n// get sample data with empty first name - only memberIds\ndataWithEmptyName = dataFromFile\n  .filter(({ patient }) => !patient.firstName.length)\n  .map(({ patient }) => patient.memberId);\n// get sample data with empty email and contest = 'Y' - only memberIds\ndataWithEmptyEmailAndConsent = dataFromFile\n  .filter(({ patient }) => (!patient.firstName.length && patient.contest))\n  .map(({ patient }) => patient.memberId);\n// get sample data with contest = 'Y' - only memberIds\ndataWithConsent = dataFromFile\n  .filter(({ patient }) => patient.contest)\n  .map(({ patient }) => patient.memberId);",
              "err": {},
              "uuid": "d1ca888b-bca2-4e0e-9fb6-c32b8649b538",
              "parentUUID": "99be0751-3721-4870-813a-565510d8bf0c",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook",
              "fullTitle": "Patients integration tests \"after all\" hook",
              "timedOut": false,
              "duration": 57,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const collections = await dbConnection.db.collections();\nfor (const collection of collections) {\n  await collection.deleteOne(); // eslint-disable-line\n}\nawait dbConnection.db.dropDatabase();",
              "err": {},
              "uuid": "1a66f5fc-e975-4437-b188-964efca5f09f",
              "parentUUID": "99be0751-3721-4870-813a-565510d8bf0c",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "sample file should be imported successfull",
              "fullTitle": "Patients integration tests sample file should be imported successfull",
              "timedOut": false,
              "duration": 68,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "importResult = await service.importData(SAMPLE_FILE);\nexpect(importResult).to.have.property('count');\nexpect(importResult.count).to.be.above(1);",
              "err": {},
              "uuid": "806abf5b-60c8-423a-be58-6fb7c1dd32fd",
              "parentUUID": "99be0751-3721-4870-813a-565510d8bf0c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "imported count should be equal to lines count in sample file",
              "fullTitle": "Patients integration tests imported count should be equal to lines count in sample file",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(importResult.count).to.equal(fileLines.length);",
              "err": {},
              "uuid": "cb73339a-fce7-4868-ad76-ce30bd4390c2",
              "parentUUID": "99be0751-3721-4870-813a-565510d8bf0c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "all lines from sample data present in DB",
              "fullTitle": "Patients integration tests all lines from sample data present in DB",
              "timedOut": false,
              "duration": 64,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const checkedMembers = await Promise.all(dataFromFile.map(async ({ patient }) => {\n  const { memberId } = patient;\n  try {\n    await service.getPatient(memberId);\n    // patient present in DB\n    return true;\n  } catch (err) {\n    // patient not present in DB\n    return false;\n  }\n}));\nconst isAllMembersExist = checkedMembers.every(item => !!item);\nexpect(checkedMembers.length).to.equal(fileLines.length);\nexpect(isAllMembersExist).to.equal(true);",
              "err": {},
              "uuid": "13e8c1b0-a689-4095-aa25-bd2587d787f2",
              "parentUUID": "99be0751-3721-4870-813a-565510d8bf0c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "all patients with contest=\"Y\" has emails created in DB and this emails has proper structure",
              "fullTitle": "Patients integration tests all patients with contest=\"Y\" has emails created in DB and this emails has proper structure",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await Promise.all(dataWithConsent.map(async (memberId) => {\n  const result = await service.getPatient(memberId);\n  expect(result).to.have.property('patient');\n  expect(result).to.have.property('emails');\n  expect(result.patient.memberId).to.equal(memberId);\n  expect(result.emails).to.not.equal(null);\n  expect(result.emails).to.deep.equal(getSampleEmailsForMember(memberId));\n}));",
              "err": {},
              "uuid": "44d8d49a-9cc2-4c1a-b56c-0486c0cefda8",
              "parentUUID": "99be0751-3721-4870-813a-565510d8bf0c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "check patients with empty names",
              "fullTitle": "Patients integration tests check patients with empty names",
              "timedOut": false,
              "duration": 10,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "\"Patients mamberIds with empty FirstName: 15245, 16345\"",
              "code": "const { items } = await service.getList();\nconst emptyNameItems = items.filter(item => !item.firstName.length).map(item => item.memberId);\nexpect(emptyNameItems.length).to.equal(dataWithEmptyName.length);\nfor (const memberId of emptyNameItems) {\n  expect(dataWithEmptyName.includes(memberId)).to.equal(true);\n}\naddContext(this, `Patients mamberIds with empty FirstName: ${emptyNameItems.join(', ')}`);",
              "err": {},
              "uuid": "d614bf8b-fc59-42df-8c48-575d55ab8c98",
              "parentUUID": "99be0751-3721-4870-813a-565510d8bf0c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "check patients with empty email and contest=\"Y\"",
              "fullTitle": "Patients integration tests check patients with empty email and contest=\"Y\"",
              "timedOut": false,
              "duration": 10,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "\"Patients mamberIds with empty Email Address but contest=\\\"Y\\\": \"",
              "code": "const { items } = await service.getList();\nconst emptyEmailItems = items.filter(item => !item.emailAddress.length && item.contest).map(item => item.memberId);\nexpect(emptyEmailItems.length).to.equal(dataWithEmptyEmailAndConsent.length);\nfor (const memberId of emptyEmailItems) {\n  expect(dataWithEmptyEmailAndConsent.includes(memberId)).to.equal(true);\n}\naddContext(this, `Patients mamberIds with empty Email Address but contest=\"Y\": ${emptyEmailItems.join(', ')}`);",
              "err": {},
              "uuid": "ec2b1332-265f-4967-b3e3-471ec755ca2d",
              "parentUUID": "99be0751-3721-4870-813a-565510d8bf0c",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "806abf5b-60c8-423a-be58-6fb7c1dd32fd",
            "cb73339a-fce7-4868-ad76-ce30bd4390c2",
            "13e8c1b0-a689-4095-aa25-bd2587d787f2",
            "44d8d49a-9cc2-4c1a-b56c-0486c0cefda8",
            "d614bf8b-fc59-42df-8c48-575d55ab8c98",
            "ec2b1332-265f-4967-b3e3-471ec755ca2d"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 153,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "3d1121a7-509c-4ffc-abc1-13f85f403551",
          "title": "Parser library tests",
          "fullFile": "/Users/kocmoc/Work/digitory/load-api/tests/unit/parser.test.js",
          "file": "/tests/unit/parser.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "b2196cff-4f15-4f4a-b2b4-2b49a713092a",
              "title": "parseHeader method",
              "fullFile": "/Users/kocmoc/Work/digitory/load-api/tests/unit/parser.test.js",
              "file": "/tests/unit/parser.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "exact header should be parsed successfully",
                  "fullTitle": "Parser library tests parseHeader method exact header should be parsed successfully",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const result = parseHeader(CORRECT_HEADER_1);\nexpect(result).to.equal(true);",
                  "err": {},
                  "uuid": "ae311b54-5a8b-4edd-bbff-e52c1b229e21",
                  "parentUUID": "b2196cff-4f15-4f4a-b2b4-2b49a713092a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "header with additional fileds at the end should be parsed successfully",
                  "fullTitle": "Parser library tests parseHeader method header with additional fileds at the end should be parsed successfully",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const result = parseHeader(CORRECT_HEADER_2);\nexpect(result).to.equal(true);",
                  "err": {},
                  "uuid": "f89cd30f-dcc9-45d0-bccc-2e4bb13cd456",
                  "parentUUID": "b2196cff-4f15-4f4a-b2b4-2b49a713092a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "header started with wrong column should throw error",
                  "fullTitle": "Parser library tests parseHeader method header started with wrong column should throw error",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(() => parseHeader(WRONG_HEADER_1)).to.throw(ParserError, 'Header incompatible format');",
                  "err": {},
                  "uuid": "af00fa91-1661-4c9c-8077-5e33158a0f17",
                  "parentUUID": "b2196cff-4f15-4f4a-b2b4-2b49a713092a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "header without some mandatory columns should throw error",
                  "fullTitle": "Parser library tests parseHeader method header without some mandatory columns should throw error",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(() => parseHeader(WRONG_HEADER_2)).to.throw(ParserError, 'Header incompatible format');",
                  "err": {},
                  "uuid": "2147a33c-c01e-4440-8f94-844090512ea0",
                  "parentUUID": "b2196cff-4f15-4f4a-b2b4-2b49a713092a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "header with some some mandatory columns should throw error",
                  "fullTitle": "Parser library tests parseHeader method header with some some mandatory columns should throw error",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(() => parseHeader(WRONG_HEADER_3)).to.throw(ParserError, 'Header incompatible format');",
                  "err": {},
                  "uuid": "ca3b5b7e-2870-41da-a018-0e82840f8f69",
                  "parentUUID": "b2196cff-4f15-4f4a-b2b4-2b49a713092a",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "ae311b54-5a8b-4edd-bbff-e52c1b229e21",
                "f89cd30f-dcc9-45d0-bccc-2e4bb13cd456",
                "af00fa91-1661-4c9c-8077-5e33158a0f17",
                "2147a33c-c01e-4440-8f94-844090512ea0",
                "ca3b5b7e-2870-41da-a018-0e82840f8f69"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "34f36c86-15fa-4558-9685-fbb646b3a6f4",
              "title": "parseLine method",
              "fullFile": "/Users/kocmoc/Work/digitory/load-api/tests/unit/parser.test.js",
              "file": "/tests/unit/parser.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "correct values with consent=\"Y\" should return parsed data with emails",
                  "fullTitle": "Parser library tests parseLine method correct values with consent=\"Y\" should return parsed data with emails",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const result = parseLine(CORRECT_LINE_WITH_CONSENT_Y);\nexpect(result).to.have.property('patient');\nexpect(result).to.have.property('emails');\nexpect(result.patient).to.deep.equal(PARSED_PATIENT_WITH_CONSENT_Y);\nexpect(result.emails).to.deep.equal(PARSED_PATIENT_EMAILS);",
                  "err": {},
                  "uuid": "e59abbfe-cdcf-4add-8ef4-86edbdd1ba60",
                  "parentUUID": "34f36c86-15fa-4558-9685-fbb646b3a6f4",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "correct values with consent=\"N\" should return parsed data without emails",
                  "fullTitle": "Parser library tests parseLine method correct values with consent=\"N\" should return parsed data without emails",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const result = parseLine(CORRECT_LINE_WITH_CONSENT_N);\nexpect(result).to.have.property('patient');\nexpect(result).to.have.property('emails');\nexpect(result.patient).to.deep.equal(PARSED_PATIENT_WITH_CONSENT_N);\nexpect(result.emails).to.deep.equal(null);",
                  "err": {},
                  "uuid": "25bd74c2-3829-40e9-b318-2c5681b67b34",
                  "parentUUID": "34f36c86-15fa-4558-9685-fbb646b3a6f4",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "empty values should return parsed data with empty values",
                  "fullTitle": "Parser library tests parseLine method empty values should return parsed data with empty values",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const result = parseLine(CORRECT_LINE_WITH_EMPTY_FIELDS);\nexpect(result).to.have.property('patient');\nexpect(result).to.have.property('emails');\nexpect(result.patient).to.deep.equal(PARSED_PATIENT_WITH_EMPTY_VALUES);\nexpect(result.emails).to.deep.equal(null);",
                  "err": {},
                  "uuid": "c274a3c9-cc6a-4841-b0c4-7ba0dc06556b",
                  "parentUUID": "34f36c86-15fa-4558-9685-fbb646b3a6f4",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "line with incompatible format should throw error",
                  "fullTitle": "Parser library tests parseLine method line with incompatible format should throw error",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(() => parseLine(WRONG_LINE_WITH_INCOMPATIBLE_FORMAT)).to.throw(ParserError, 'Data line has incompatible format');",
                  "err": {},
                  "uuid": "7ee73be8-145c-4c5e-a29a-7a6fa5548f1d",
                  "parentUUID": "34f36c86-15fa-4558-9685-fbb646b3a6f4",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "line with empty memeber id should throw error",
                  "fullTitle": "Parser library tests parseLine method line with empty memeber id should throw error",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(() => parseLine(WRONG_LINE_WITH_EMPTY_MEMBER_ID)).to.throw(ParserError);",
                  "err": {},
                  "uuid": "4f420025-6663-4d12-96ed-a9f258931e8e",
                  "parentUUID": "34f36c86-15fa-4558-9685-fbb646b3a6f4",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "line with wrong program id should throw error",
                  "fullTitle": "Parser library tests parseLine method line with wrong program id should throw error",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(() => parseLine(WRONG_LINE_WITH_WRONG_PROGRAM_ID)).to.throw(ParserError);",
                  "err": {},
                  "uuid": "4e86fc84-63bb-484e-8c76-49e3fa95ad33",
                  "parentUUID": "34f36c86-15fa-4558-9685-fbb646b3a6f4",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "line with wrong card number should throw error",
                  "fullTitle": "Parser library tests parseLine method line with wrong card number should throw error",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(() => parseLine(WRONG_LINE_WITH_WRONG_CARD_NUMBER)).to.throw(ParserError);",
                  "err": {},
                  "uuid": "d85e6375-da5e-4193-ab69-d405959053bc",
                  "parentUUID": "34f36c86-15fa-4558-9685-fbb646b3a6f4",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "line with wrong member id should throw error",
                  "fullTitle": "Parser library tests parseLine method line with wrong member id should throw error",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(() => parseLine(WRONG_LINE_WITH_WRONG_MEMBER_ID)).to.throw(ParserError);",
                  "err": {},
                  "uuid": "229f1b3a-961e-43d9-9b89-03360da0b660",
                  "parentUUID": "34f36c86-15fa-4558-9685-fbb646b3a6f4",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "line with wrong date of birth should throw error",
                  "fullTitle": "Parser library tests parseLine method line with wrong date of birth should throw error",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(() => parseLine(WRONG_LINE_WITH_WRONG_DATE_OF_BIRTH)).to.throw(ParserError);",
                  "err": {},
                  "uuid": "ef1b3e7c-cd9e-4518-914e-0f9886487464",
                  "parentUUID": "34f36c86-15fa-4558-9685-fbb646b3a6f4",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "line with wrong state should throw error",
                  "fullTitle": "Parser library tests parseLine method line with wrong state should throw error",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(() => parseLine(WRONG_LINE_WITH_WRONG_STATE)).to.throw(ParserError);",
                  "err": {},
                  "uuid": "647c4acd-6b07-45ff-8c73-f2bc76408717",
                  "parentUUID": "34f36c86-15fa-4558-9685-fbb646b3a6f4",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "line with wrong zip code should throw error",
                  "fullTitle": "Parser library tests parseLine method line with wrong zip code should throw error",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(() => parseLine(WRONG_LINE_WITH_WRONG_ZIP_CODE)).to.throw(ParserError);",
                  "err": {},
                  "uuid": "787d281c-000a-4b92-96d2-f8ae63990a05",
                  "parentUUID": "34f36c86-15fa-4558-9685-fbb646b3a6f4",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "line with wrong email should throw error",
                  "fullTitle": "Parser library tests parseLine method line with wrong email should throw error",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(() => parseLine(WRONG_LINE_WITH_WRONG_EMAIL)).to.throw(ParserError);",
                  "err": {},
                  "uuid": "a90b1615-a284-42d4-bb5a-16cb3c90c2c0",
                  "parentUUID": "34f36c86-15fa-4558-9685-fbb646b3a6f4",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "e59abbfe-cdcf-4add-8ef4-86edbdd1ba60",
                "25bd74c2-3829-40e9-b318-2c5681b67b34",
                "c274a3c9-cc6a-4841-b0c4-7ba0dc06556b",
                "7ee73be8-145c-4c5e-a29a-7a6fa5548f1d",
                "4f420025-6663-4d12-96ed-a9f258931e8e",
                "4e86fc84-63bb-484e-8c76-49e3fa95ad33",
                "d85e6375-da5e-4193-ab69-d405959053bc",
                "229f1b3a-961e-43d9-9b89-03360da0b660",
                "ef1b3e7c-cd9e-4518-914e-0f9886487464",
                "647c4acd-6b07-45ff-8c73-f2bc76408717",
                "787d281c-000a-4b92-96d2-f8ae63990a05",
                "a90b1615-a284-42d4-bb5a-16cb3c90c2c0"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 4,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "7.1.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "index",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "5.0.0"
    },
    "marge": {
      "options": null,
      "version": "4.1.0"
    }
  }
}